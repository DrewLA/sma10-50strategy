# -*- coding: utf-8 -*-
"""sma10-50-strategy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16gqzH-PrTPmsXX3o91kG_ZIm1omfHlKY
"""

#Description: Dual Moving Average Crossover Strategy Demo

#Imports
#!pip install yfinance
import pandas as pd
import numpy as np
from datetime import datetime
import yfinance as yf
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

#load data set
AMD = yf.download("AMD", "2019-01-01", "2020-07-01")

AMD

# Visualize
plt.figure(figsize=(12.5,4.5))
plt.plot(AMD['Adj Close'], label = 'AMD')
plt.title('AMD Adj Close price - 1 year')
plt.xlabel('January 2019 - July 2020')
plt.ylabel('Adj Close price in USD')
plt.legend(loc='upper left')
plt.show()

#create simple MA with 10 day window
SMA10 = pd.DataFrame()
SMA10['Adj Close Price'] = AMD['Adj Close'].rolling(window=10).mean()
SMA10

#create simple MA with 50 day window
SMA50 = pd.DataFrame()
SMA50['Adj Close Price'] = AMD['Adj Close'].rolling(window=50).mean()
SMA50

#visualize data
plt.figure(figsize=(12.5,4.5))
plt.plot(SMA10['Adj Close Price'], label = 'SMA10')
plt.plot(SMA50['Adj Close Price'], label = 'SMA50')
plt.plot(AMD['Adj Close'], label = 'AMD')
plt.title('AMD Adj Close price - 1 year')
plt.xlabel('January 2019 - July 2020')
plt.ylabel('Adj Close price SMA Crossover in USD')
plt.legend(loc='upper left')
plt.show()

#Create new Df to store all data
data = pd.DataFrame()
data['AMD'] = AMD['Adj Close']
data['SMA10'] = SMA10['Adj Close Price']
data['SMA50'] = SMA50['Adj Close Price']
data

# Create signal function
def returnBuySellPrice(data):
  sigPriceBuy = []
  sigPriceSell = []
  flag = 1

  for i in range(len(data)):
    if data['SMA10'][i] > data['SMA50'][i]:
      if flag != 1:
        sigPriceBuy.append(data['AMD'][i])
        sigPriceSell.append(np.nan)
        flag = 1
      else:
        sigPriceBuy.append(np.nan)
        sigPriceSell.append(np.nan)
    elif data['SMA10'][i] < data['SMA50'][i]:
      if flag != 0:
        sigPriceBuy.append(np.nan)
        sigPriceSell.append(data['AMD'][i])
        flag = 0
      else:
        sigPriceBuy.append(np.nan)
        sigPriceSell.append(np.nan)
    else:
        sigPriceBuy.append(np.nan)
        sigPriceSell.append(np.nan)
  
  return (sigPriceBuy, sigPriceSell)

#store calls
buy, sell = returnBuySellPrice(data)
calls = pd.DataFrame()
calls['buys'] = buy
calls['sells'] = sell
#calls[200:376]
data['buy'] = buy
data['sell'] = sell
data[100:376]

# Visualize strategy
plt.figure(figsize=(12.5,4.5))
plt.plot(data['AMD'], label = 'AMD', alpha = 0.3)
plt.plot(data['SMA10'], label = 'SMA10', alpha = 0.3)
plt.plot(data['SMA50'], label = 'SMA50', alpha = 0.3)
plt.scatter(data.index, data['buy'], label = 'Buy', marker = '^', color = 'green')
plt.scatter(data.index, data['sell'], label = 'sell', marker = 'v', color = 'red')
plt.title('AMD Adj Close Price MA Buy-Sell Calls')
plt.legend(loc='upper left')
plt.xlabel('January 2019 - July 2020')
plt.ylabel('Adj close price USD ($)')
plt.show()